"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Zip = require('./zip');

var parsePlist = require('plist').parse;

var parseBplist = require('bplist-parser').parseBuffer;

var cgbiToPng = require('cgbi-to-png');

var _require = require('./utils'),
    findIpaIconPath = _require.findIpaIconPath,
    getBase64FromBuffer = _require.getBase64FromBuffer;

var PlistName = new RegExp('payload/.+?.app/info.plist$', 'i');
var ProvisionName = /payload\/.+?\.app\/embedded.mobileprovision/;

var IpaParser =
/*#__PURE__*/
function (_Zip) {
  _inherits(IpaParser, _Zip);

  function IpaParser(file) {
    var _this;

    _classCallCheck(this, IpaParser);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(IpaParser).call(this, file));

    if (!(_assertThisInitialized(_this) instanceof IpaParser)) {
      return _possibleConstructorReturn(_this, new IpaParser(file));
    }

    return _this;
  }

  _createClass(IpaParser, [{
    key: "parse",
    value: function parse() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2.getEntries([PlistName, ProvisionName]).then(function (buffers) {
          if (!buffers[PlistName]) {
            throw new Error('Info.plist can\'t be found.');
          } // 解析 plist


          var plistInfo = _this2._parsePlist(buffers[PlistName]); // 解析 mobileprovision


          var provisionInfo = _this2._parseProvision(buffers[ProvisionName]);

          plistInfo.mobileProvision = provisionInfo; // 解析 ipa安装包图标

          var iconRegex = new RegExp(findIpaIconPath(plistInfo).toLowerCase());

          _this2.getEntry(iconRegex).then(function (iconBuffer) {
            // ipa安装包的图标被特殊处理过，需要经过转换
            plistInfo.icon = iconBuffer ? getBase64FromBuffer(cgbiToPng.revert(iconBuffer)) : null;
            resolve(plistInfo);
          })["catch"](function (e) {
            reject(e);
          });
        })["catch"](function (e) {
          reject(e);
        });
      });
    }
    /**
     * 解析plist文件
     * @param {Buffer} buffer // 要解析的plist文件buffer
     */

  }, {
    key: "_parsePlist",
    value: function _parsePlist(buffer) {
      var result;
      var bufferType = buffer[0];

      if (bufferType === 60 || bufferType === '<' || bufferType === 239) {
        result = parsePlist(buffer.toString());
      } else if (bufferType === 98) {
        result = parseBplist(buffer)[0];
      } else {
        throw new Error('Unknow plist buffer type.');
      }

      return result;
    }
    /**
     * 解析provision文件
     * @param {Buffer} buffer // 要解析的plist文件buffer
     */

  }, {
    key: "_parseProvision",
    value: function _parseProvision(buffer) {
      var info = {};

      if (buffer) {
        info = buffer.toString('utf-8');
        var firstIndex = info.indexOf('<');
        var endIndex = info.indexOf('</plist>');
        info = info.slice(firstIndex, endIndex + 8);
        info = parsePlist(info);
      }

      return info;
    }
  }]);

  return IpaParser;
}(Zip);

module.exports = IpaParser;